version: "3.8"

services:
  redis-cache:
    container_name: event-booking-redis
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - .volumes/redis-data:/data
    networks:
      - event-network
    environment:
      REDIS_PASSWORD: password
    command: redis-server --requirepass password
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  rabbitmq-broker:
    container_name: event-booking-rabbitmq
    image: rabbitmq:management
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - .volumes/rabbitmq-data:/var/lib/rabbitmq/
      - .volumes/rabbitmq-logs:/var/log/rabbitmq
    networks:
      - event-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10

  user-service:
    container_name: event-booking-user-service
    build:
      context: ./user-service
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8081:8081"
    networks:
      - event-network
    environment:
      - MONGO_URI=mongodb://event-booking-mongo:27017/db_event_booking
      - RABBITMQ_URL=amqp://user:password@rabbitmq-broker:5672
    depends_on:
      rabbitmq-broker:
        condition: service_healthy
      event-booking-mongo:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  background-worker:
    container_name: event-booking-background-worker
    build:
      context: ./workers-service
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8086:8086"
    networks:
      - event-network
    environment:
      - MONGO_URI=mongodb://event-booking-mongo:27017/db_event_booking
      - RABBITMQ_URL=amqp://user:password@rabbitmq-broker:5672
    depends_on:
      rabbitmq-broker:
        condition: service_healthy
      event-booking-mongo:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  ticket-service:
    container_name: event-booking-ticket-service
    build:
      context: ./ticket-service
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8083:8083"
    networks:
      - event-network
    environment:
      - MONGO_URI=mongodb://event-booking-mongo:27017/db_event_booking
      - RABBITMQ_URL=amqp://user:password@rabbitmq-broker:5672
      - REDIS_URL=redis://:password@redis-cache:6379
    depends_on:
      rabbitmq-broker:
        condition: service_healthy
      event-booking-mongo:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  booking-service:
    container_name: event-booking-booking-service
    build:
      context: ./booking-service
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8084:8084"
    networks:
      - event-network
    environment:
      - MONGO_URI=mongodb://event-booking-mongo:27017/db_event_booking
      - RABBITMQ_URL=amqp://user:password@rabbitmq-broker:5672
    depends_on:
      rabbitmq-broker:
        condition: service_healthy
      event-booking-mongo:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  event-service:
    container_name: event-booking-event-service
    build:
      context: ./event-service
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8082:8082"
    networks:
      - event-network
    environment:
      - BASE_URL_SERVER=http://localhost:8080
      - MONGO_URI=mongodb://event-booking-mongo:27017/db_event_booking
      - RABBITMQ_URL=amqp://user:password@rabbitmq-broker:5672
      - REDIS_URL=redis://:password@redis-cache:6379
    depends_on:
      rabbitmq-broker:
        condition: service_healthy
      event-booking-mongo:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  payment-service:
    container_name: event-booking-payment-service
    build:
      context: ./payment-service
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8085:8085"
    networks:
      - event-network
    environment:
      - MONGO_URI=mongodb://event-booking-mongo:27017/db_event_booking
      - RABBITMQ_URL=amqp://user:password@rabbitmq-broker:5672
    depends_on:
      rabbitmq-broker:
        condition: service_healthy
      event-booking-mongo:
        condition: service_healthy
      redis-cache:
        condition: service_healthy

  api-gateway:
    container_name: event-booking-api-gateway
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    restart: always
    ports:
      - "8080:8080"
    networks:
      - event-network
    environment:
      - AUTH_SERVICE_URL=http://user-service:8081
      - EVENT_SERVICE_URL=http://event-service:8082
      - TICKET_SERVICE_URL=http://ticket-service:8083
      - BOOKING_SERVICE_URL=http://booking-service:8084
      - PAYMENT_SERVICE_URL=http://payment-service:8085
    depends_on:
      user-service:
        condition: service_started
      event-service:
        condition: service_started
      ticket-service:
        condition: service_started
      booking-service:
        condition: service_started
      payment-service:
        condition: service_started
      rabbitmq-broker:
        condition: service_healthy

  event-booking-mongo:
    container_name: event-booking-mongo
    image: mongo:latest
    restart: always
    ports:
      - "27017:27017"
    networks:
      - event-network
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 10s
      retries: 15

networks:
  event-network:
    driver: bridge
    name: event-booking-network

volumes:
  mongo-data: